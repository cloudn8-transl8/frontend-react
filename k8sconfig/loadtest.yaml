---
apiVersion: v1
kind: ConfigMap
metadata:
  name: load-generator
  namespace: default
data:
  load_test.js: |
    import http from 'k6/http';
    import { sleep, check } from 'k6';
    import { Counter } from 'k6/metrics';
    // A simple counter for http requests
    export const requests = new Counter('http_reqs');
    // you can specify stages of your test (ramp up/down patterns) through the options object
    // target is the number of VUs you are aiming for
    export const options = {
      vus: 10,
      duration: '30m',
    };
    export default function () {
      // our HTTP request, note that we are saving the response to res, which can be accessed later
      const res = http.get('http://web.translate.demo.gs');
      sleep(1);
      const checkRes = check(res, {
        'status is 200': (r) => r.status === 200,
      });
    }

---
# Load test
apiVersion: apps/v1
kind: Deployment
metadata:
  name: load-generator-deployment
  labels:
    app: web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: load-generator
  template:
    metadata:
      labels:
        app: load-generator
    spec:
      containers:
      - name: load-generator
        image: loadimpact/k6
        command: ["k6", "run", "/etc/config/load_test.js"]
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
      volumes:
        - name: config-volume
          configMap:
            name: load-generator
